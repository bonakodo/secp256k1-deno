import { assertEquals, assertThrows } from './deps.ts';
import * as secp256k1 from '../src/experimental/lib.ts';

Deno.test('Random sign/verify', () => {
  const secretKey = new Uint8Array(32);
  const randomness = new Uint8Array(32);
  const message = new Uint8Array(32);
  crypto.getRandomValues(secretKey);
  crypto.getRandomValues(randomness);
  crypto.getRandomValues(message);
  const signature = secp256k1.schnorrSign(message, secretKey, randomness);
  const publicKey = secp256k1.createXOnlyPublicKey(secretKey);
  assertEquals(
    true,
    secp256k1.schnorrVerify(signature, message, publicKey),
    'The signature should verify successfully',
  );
});

/* Test vectors according to BIP-340 ("Schnorr Signatures for secp256k1").
 * See https://github.com/bitcoin/bips/blob/master/bip-0340/test-vectors.csv
 */
Deno.test('Test vector 0', () => {
  // deno-fmt-ignore
  const secretKey = new Uint8Array([
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  ]);
  // deno-fmt-ignore
  const aux_rand = new Uint8Array([
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  ]);
  // deno-fmt-ignore
  const message = new Uint8Array([
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  ]);
  // deno-fmt-ignore
  assertEquals(
    secp256k1.schnorrSign(message, secretKey, aux_rand),
    new Uint8Array([
      0xe9, 0x07, 0x83, 0x1f, 0x80, 0x84, 0x8d, 0x10, 0x69, 0xa5, 0x37, 0x1b,
      0x40, 0x24, 0x10, 0x36, 0x4b, 0xdf, 0x1c, 0x5f, 0x83, 0x07, 0xb0, 0x08,
      0x4c, 0x55, 0xf1, 0xce, 0x2d, 0xca, 0x82, 0x15, 0x25, 0xf6, 0x6a, 0x4a,
      0x85, 0xea, 0x8b, 0x71, 0xe4, 0x82, 0xa7, 0x4f, 0x38, 0x2d, 0x2c, 0xe5,
      0xeb, 0xee, 0xe8, 0xfd, 0xb2, 0x17, 0x2f, 0x47, 0x7d, 0xf4, 0x90, 0x0d,
      0x31, 0x05, 0x36, 0xc0,
    ])
  );
});

Deno.test('Test vector 1', () => {
  // deno-fmt-ignore
  const secretKey = new Uint8Array([
    0xb7, 0xe1, 0x51, 0x62, 0x8a, 0xed, 0x2a, 0x6a, 0xbf, 0x71, 0x58, 0x80,
    0x9c, 0xf4, 0xf3, 0xc7, 0x62, 0xe7, 0x16, 0x0f, 0x38, 0xb4, 0xda, 0x56,
    0xa7, 0x84, 0xd9, 0x04, 0x51, 0x90, 0xcf, 0xef,
  ]);
  // deno-fmt-ignore
  const aux_rand = new Uint8Array([
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  ]);
  // deno-fmt-ignore
  const message = new Uint8Array([
    0x24, 0x3f, 0x6a, 0x88, 0x85, 0xa3, 0x08, 0xd3, 0x13, 0x19, 0x8a, 0x2e,
    0x03, 0x70, 0x73, 0x44, 0xa4, 0x09, 0x38, 0x22, 0x29, 0x9f, 0x31, 0xd0,
    0x08, 0x2e, 0xfa, 0x98, 0xec, 0x4e, 0x6c, 0x89,
  ]);
  // deno-fmt-ignore
  assertEquals(
    secp256k1.schnorrSign(message, secretKey, aux_rand),
    new Uint8Array([
      0x68, 0x96, 0xbd, 0x60, 0xee, 0xae, 0x29, 0x6d, 0xb4, 0x8a, 0x22, 0x9f,
      0xf7, 0x1d, 0xfe, 0x07, 0x1b, 0xde, 0x41, 0x3e, 0x6d, 0x43, 0xf9, 0x17,
      0xdc, 0x8d, 0xcf, 0x8c, 0x78, 0xde, 0x33, 0x41, 0x89, 0x06, 0xd1, 0x1a,
      0xc9, 0x76, 0xab, 0xcc, 0xb2, 0x0b, 0x09, 0x12, 0x92, 0xbf, 0xf4, 0xea,
      0x89, 0x7e, 0xfc, 0xb6, 0x39, 0xea, 0x87, 0x1c, 0xfa, 0x95, 0xf6, 0xde,
      0x33, 0x9e, 0x4b, 0x0a,
    ])
  );
});

Deno.test('Test vector 2', () => {
  // deno-fmt-ignore
  const secretKey = new Uint8Array([
    0xc9, 0x0f, 0xda, 0xa2, 0x21, 0x68, 0xc2, 0x34, 0xc4, 0xc6, 0x62, 0x8b,
    0x80, 0xdc, 0x1c, 0xd1, 0x29, 0x02, 0x4e, 0x08, 0x8a, 0x67, 0xcc, 0x74,
    0x02, 0x0b, 0xbe, 0xa6, 0x3b, 0x14, 0xe5, 0xc9,
  ]);
  // deno-fmt-ignore
  const aux_rand = new Uint8Array([
    0xc8, 0x7a, 0xa5, 0x38, 0x24, 0xb4, 0xd7, 0xae, 0x2e, 0xb0, 0x35, 0xa2,
    0xb5, 0xbb, 0xbc, 0xcc, 0x08, 0x0e, 0x76, 0xcd, 0xc6, 0xd1, 0x69, 0x2c,
    0x4b, 0x0b, 0x62, 0xd7, 0x98, 0xe6, 0xd9, 0x06,
  ]);
  // deno-fmt-ignore
  const message = new Uint8Array([
    0x7e, 0x2d, 0x58, 0xd8, 0xb3, 0xbc, 0xdf, 0x1a, 0xba, 0xde, 0xc7, 0x82,
    0x90, 0x54, 0xf9, 0x0d, 0xda, 0x98, 0x05, 0xaa, 0xb5, 0x6c, 0x77, 0x33,
    0x30, 0x24, 0xb9, 0xd0, 0xa5, 0x08, 0xb7, 0x5c,
  ]);
  // deno-fmt-ignore
  assertEquals(
    secp256k1.schnorrSign(message, secretKey, aux_rand),
    new Uint8Array([
      0x58, 0x31, 0xaa, 0xee, 0xd7, 0xb4, 0x4b, 0xb7, 0x4e, 0x5e, 0xab, 0x94,
      0xba, 0x9d, 0x42, 0x94, 0xc4, 0x9b, 0xcf, 0x2a, 0x60, 0x72, 0x8d, 0x8b,
      0x4c, 0x20, 0x0f, 0x50, 0xdd, 0x31, 0x3c, 0x1b, 0xab, 0x74, 0x58, 0x79,
      0xa5, 0xad, 0x95, 0x4a, 0x72, 0xc4, 0x5a, 0x91, 0xc3, 0xa5, 0x1d, 0x3c,
      0x7a, 0xde, 0xa9, 0x8d, 0x82, 0xf8, 0x48, 0x1e, 0x0e, 0x1e, 0x03, 0x67,
      0x4a, 0x6f, 0x3f, 0xb7,
    ])
  );
});

Deno.test('Test vector 3', () => {
  // deno-fmt-ignore
  const secretKey = new Uint8Array([
    0x0b, 0x43, 0x2b, 0x26, 0x77, 0x93, 0x73, 0x81, 0xae, 0xf0, 0x5b, 0xb0,
    0x2a, 0x66, 0xec, 0xd0, 0x12, 0x77, 0x30, 0x62, 0xcf, 0x3f, 0xa2, 0x54,
    0x9e, 0x44, 0xf5, 0x8e, 0xd2, 0x40, 0x17, 0x10,
  ]);
  // deno-fmt-ignore
  const aux_rand = new Uint8Array([
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  ]);
  // deno-fmt-ignore
  const message = new Uint8Array([
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  ]);
  // deno-fmt-ignore
  assertEquals(
    secp256k1.schnorrSign(message, secretKey, aux_rand),
    new Uint8Array([
      0x7e, 0xb0, 0x50, 0x97, 0x57, 0xe2, 0x46, 0xf1, 0x94, 0x49, 0x88, 0x56,
      0x51, 0x61, 0x1c, 0xb9, 0x65, 0xec, 0xc1, 0xa1, 0x87, 0xdd, 0x51, 0xb6,
      0x4f, 0xda, 0x1e, 0xdc, 0x96, 0x37, 0xd5, 0xec, 0x97, 0x58, 0x2b, 0x9c,
      0xb1, 0x3d, 0xb3, 0x93, 0x37, 0x05, 0xb3, 0x2b, 0xa9, 0x82, 0xaf, 0x5a,
      0xf2, 0x5f, 0xd7, 0x88, 0x81, 0xeb, 0xb3, 0x27, 0x71, 0xfc, 0x59, 0x22,
      0xef, 0xc6, 0x6e, 0xa3,
    ])
  );
});

Deno.test('Test vector 4', () => {
  // deno-fmt-ignore
  const publicKey = secp256k1.convertToXOnlyPublicKey(
    new Uint8Array([
      0xd6, 0x9c, 0x35, 0x09, 0xbb, 0x99, 0xe4, 0x12, 0xe6, 0x8b, 0x0f, 0xe8,
      0x54, 0x4e, 0x72, 0x83, 0x7d, 0xfa, 0x30, 0x74, 0x6d, 0x8b, 0xe2, 0xaa,
      0x65, 0x97, 0x5f, 0x29, 0xd2, 0x2d, 0xc7, 0xb9,
    ])
  );
  // deno-fmt-ignore
  const message = new Uint8Array([
    0x4d, 0xf3, 0xc3, 0xf6, 0x8f, 0xcc, 0x83, 0xb2, 0x7e, 0x9d, 0x42, 0xc9,
    0x04, 0x31, 0xa7, 0x24, 0x99, 0xf1, 0x78, 0x75, 0xc8, 0x1a, 0x59, 0x9b,
    0x56, 0x6c, 0x98, 0x89, 0xb9, 0x69, 0x67, 0x03,
  ]);
  // deno-fmt-ignore
  const signature = new Uint8Array([
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b,
    0x78, 0xce, 0x56, 0x3f, 0x89, 0xa0, 0xed, 0x94, 0x14, 0xf5, 0xaa, 0x28,
    0xad, 0x0d, 0x96, 0xd6, 0x79, 0x5f, 0x9c, 0x63, 0x76, 0xaf, 0xb1, 0x54,
    0x8a, 0xf6, 0x03, 0xb3, 0xeb, 0x45, 0xc9, 0xf8, 0x20, 0x7d, 0xee, 0x10,
    0x60, 0xcb, 0x71, 0xc0, 0x4e, 0x80, 0xf5, 0x93, 0x06, 0x0b, 0x07, 0xd2,
    0x83, 0x08, 0xd7, 0xf4,
  ]);
  assertEquals(true, secp256k1.schnorrVerify(signature, message, publicKey));
});

// deno-fmt-ignore
Deno.test("Test vector 5", () => {
  const compressedPublicKey = new Uint8Array([
    0xee, 0xfd, 0xea, 0x4c, 0xdb, 0x67, 0x77, 0x50, 0xa4, 0x20, 0xfe, 0xe8,
    0x07, 0xea, 0xcf, 0x21, 0xeb, 0x98, 0x98, 0xae, 0x79, 0xb9, 0x76, 0x87,
    0x66, 0xe4, 0xfa, 0xa0, 0x4a, 0x2d, 0x4a, 0x34,
  ]);
  assertThrows(
    () => {
      secp256k1.convertToXOnlyPublicKey(compressedPublicKey);
    },
    Error,
    "Could not convert the serialized public key to x-only public key"
  );
});

Deno.test('Test vector 6', () => {
  // deno-fmt-ignore
  const publicKey = secp256k1.convertToXOnlyPublicKey(
    new Uint8Array([
      0xdf, 0xf1, 0xd7, 0x7f, 0x2a, 0x67, 0x1c, 0x5f, 0x36, 0x18, 0x37, 0x26,
      0xdb, 0x23, 0x41, 0xbe, 0x58, 0xfe, 0xae, 0x1d, 0xa2, 0xde, 0xce, 0xd8,
      0x43, 0x24, 0x0f, 0x7b, 0x50, 0x2b, 0xa6, 0x59,
    ])
  );
  // deno-fmt-ignore
  const message = new Uint8Array([
    0x24, 0x3f, 0x6a, 0x88, 0x85, 0xa3, 0x08, 0xd3, 0x13, 0x19, 0x8a, 0x2e,
    0x03, 0x70, 0x73, 0x44, 0xa4, 0x09, 0x38, 0x22, 0x29, 0x9f, 0x31, 0xd0,
    0x08, 0x2e, 0xfa, 0x98, 0xec, 0x4e, 0x6c, 0x89,
  ]);
  // deno-fmt-ignore
  const signature = new Uint8Array([
    0xff, 0xf9, 0x7b, 0xd5, 0x75, 0x5e, 0xee, 0xa4, 0x20, 0x45, 0x3a, 0x14,
    0x35, 0x52, 0x35, 0xd3, 0x82, 0xf6, 0x47, 0x2f, 0x85, 0x68, 0xa1, 0x8b,
    0x2f, 0x05, 0x7a, 0x14, 0x60, 0x29, 0x75, 0x56, 0x3c, 0xc2, 0x79, 0x44,
    0x64, 0x0a, 0xc6, 0x07, 0xcd, 0x10, 0x7a, 0xe1, 0x09, 0x23, 0xd9, 0xef,
    0x7a, 0x73, 0xc6, 0x43, 0xe1, 0x66, 0xbe, 0x5e, 0xbe, 0xaf, 0xa3, 0x4b,
    0x1a, 0xc5, 0x53, 0xe2,
  ]);
  assertEquals(false, secp256k1.schnorrVerify(signature, message, publicKey));
});

Deno.test('Test vector 7', () => {
  // deno-fmt-ignore
  const publicKey = secp256k1.convertToXOnlyPublicKey(
    new Uint8Array([
      0xdf, 0xf1, 0xd7, 0x7f, 0x2a, 0x67, 0x1c, 0x5f, 0x36, 0x18, 0x37, 0x26,
      0xdb, 0x23, 0x41, 0xbe, 0x58, 0xfe, 0xae, 0x1d, 0xa2, 0xde, 0xce, 0xd8,
      0x43, 0x24, 0x0f, 0x7b, 0x50, 0x2b, 0xa6, 0x59,
    ])
  );
  // deno-fmt-ignore
  const message = new Uint8Array([
    0x24, 0x3f, 0x6a, 0x88, 0x85, 0xa3, 0x08, 0xd3, 0x13, 0x19, 0x8a, 0x2e,
    0x03, 0x70, 0x73, 0x44, 0xa4, 0x09, 0x38, 0x22, 0x29, 0x9f, 0x31, 0xd0,
    0x08, 0x2e, 0xfa, 0x98, 0xec, 0x4e, 0x6c, 0x89,
  ]);
  // deno-fmt-ignore
  const signature = new Uint8Array([
    0x1f, 0xa6, 0x2e, 0x33, 0x1e, 0xdb, 0xc2, 0x1c, 0x39, 0x47, 0x92, 0xd2,
    0xab, 0x11, 0x00, 0xa7, 0xb4, 0x32, 0xb0, 0x13, 0xdf, 0x3f, 0x6f, 0xf4,
    0xf9, 0x9f, 0xcb, 0x33, 0xe0, 0xe1, 0x51, 0x5f, 0x28, 0x89, 0x0b, 0x3e,
    0xdb, 0x6e, 0x71, 0x89, 0xb6, 0x30, 0x44, 0x8b, 0x51, 0x5c, 0xe4, 0xf8,
    0x62, 0x2a, 0x95, 0x4c, 0xfe, 0x54, 0x57, 0x35, 0xaa, 0xea, 0x51, 0x34,
    0xfc, 0xcd, 0xb2, 0xbd,
  ]);
  assertEquals(false, secp256k1.schnorrVerify(signature, message, publicKey));
});

Deno.test('Test vector 8', () => {
  // deno-fmt-ignore
  const publicKey = secp256k1.convertToXOnlyPublicKey(
    new Uint8Array([
      0xdf, 0xf1, 0xd7, 0x7f, 0x2a, 0x67, 0x1c, 0x5f, 0x36, 0x18, 0x37, 0x26,
      0xdb, 0x23, 0x41, 0xbe, 0x58, 0xfe, 0xae, 0x1d, 0xa2, 0xde, 0xce, 0xd8,
      0x43, 0x24, 0x0f, 0x7b, 0x50, 0x2b, 0xa6, 0x59,
    ])
  );
  // deno-fmt-ignore
  const message = new Uint8Array([
    0x24, 0x3f, 0x6a, 0x88, 0x85, 0xa3, 0x08, 0xd3, 0x13, 0x19, 0x8a, 0x2e,
    0x03, 0x70, 0x73, 0x44, 0xa4, 0x09, 0x38, 0x22, 0x29, 0x9f, 0x31, 0xd0,
    0x08, 0x2e, 0xfa, 0x98, 0xec, 0x4e, 0x6c, 0x89,
  ]);
  // deno-fmt-ignore
  const signature = new Uint8Array([
    0x6c, 0xff, 0x5c, 0x3b, 0xa8, 0x6c, 0x69, 0xea, 0x4b, 0x73, 0x76, 0xf3,
    0x1a, 0x9b, 0xcb, 0x4f, 0x74, 0xc1, 0x97, 0x60, 0x89, 0xb2, 0xd9, 0x96,
    0x3d, 0xa2, 0xe5, 0x54, 0x3e, 0x17, 0x77, 0x69, 0x96, 0x17, 0x64, 0xb3,
    0xaa, 0x9b, 0x2f, 0xfc, 0xb6, 0xef, 0x94, 0x7b, 0x68, 0x87, 0xa2, 0x26,
    0xe8, 0xd7, 0xc9, 0x3e, 0x00, 0xc5, 0xed, 0x0c, 0x18, 0x34, 0xff, 0x0d,
    0x0c, 0x2e, 0x6d, 0xa6,
  ]);
  assertEquals(false, secp256k1.schnorrVerify(signature, message, publicKey));
});

Deno.test('Test vector 9', () => {
  // deno-fmt-ignore
  const publicKey = secp256k1.convertToXOnlyPublicKey(
    new Uint8Array([
      0xdf, 0xf1, 0xd7, 0x7f, 0x2a, 0x67, 0x1c, 0x5f, 0x36, 0x18, 0x37, 0x26,
      0xdb, 0x23, 0x41, 0xbe, 0x58, 0xfe, 0xae, 0x1d, 0xa2, 0xde, 0xce, 0xd8,
      0x43, 0x24, 0x0f, 0x7b, 0x50, 0x2b, 0xa6, 0x59,
    ])
  );
  // deno-fmt-ignore
  const message = new Uint8Array([
    0x24, 0x3f, 0x6a, 0x88, 0x85, 0xa3, 0x08, 0xd3, 0x13, 0x19, 0x8a, 0x2e,
    0x03, 0x70, 0x73, 0x44, 0xa4, 0x09, 0x38, 0x22, 0x29, 0x9f, 0x31, 0xd0,
    0x08, 0x2e, 0xfa, 0x98, 0xec, 0x4e, 0x6c, 0x89,
  ]);
  // deno-fmt-ignore
  const signature = new Uint8Array([
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x3d, 0xda, 0x83,
    0x28, 0xaf, 0x9c, 0x23, 0xa9, 0x4c, 0x1f, 0xee, 0xcf, 0xd1, 0x23, 0xba,
    0x4f, 0xb7, 0x34, 0x76, 0xf0, 0xd5, 0x94, 0xdc, 0xb6, 0x5c, 0x64, 0x25,
    0xbd, 0x18, 0x60, 0x51,
  ]);
  assertEquals(false, secp256k1.schnorrVerify(signature, message, publicKey));
});

Deno.test('Test vector 10', () => {
  // deno-fmt-ignore
  const publicKey = secp256k1.convertToXOnlyPublicKey(
    new Uint8Array([
      0xdf, 0xf1, 0xd7, 0x7f, 0x2a, 0x67, 0x1c, 0x5f, 0x36, 0x18, 0x37, 0x26,
      0xdb, 0x23, 0x41, 0xbe, 0x58, 0xfe, 0xae, 0x1d, 0xa2, 0xde, 0xce, 0xd8,
      0x43, 0x24, 0x0f, 0x7b, 0x50, 0x2b, 0xa6, 0x59,
    ])
  );
  // deno-fmt-ignore
  const message = new Uint8Array([
    0x24, 0x3f, 0x6a, 0x88, 0x85, 0xa3, 0x08, 0xd3, 0x13, 0x19, 0x8a, 0x2e,
    0x03, 0x70, 0x73, 0x44, 0xa4, 0x09, 0x38, 0x22, 0x29, 0x9f, 0x31, 0xd0,
    0x08, 0x2e, 0xfa, 0x98, 0xec, 0x4e, 0x6c, 0x89,
  ]);
  // deno-fmt-ignore
  const signature = new Uint8Array([
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x76, 0x15, 0xfb, 0xaf,
    0x5a, 0xe2, 0x88, 0x64, 0x01, 0x3c, 0x09, 0x97, 0x42, 0xde, 0xad, 0xb4,
    0xdb, 0xa8, 0x7f, 0x11, 0xac, 0x67, 0x54, 0xf9, 0x37, 0x80, 0xd5, 0xa1,
    0x83, 0x7c, 0xf1, 0x97,
  ]);
  assertEquals(false, secp256k1.schnorrVerify(signature, message, publicKey));
});

Deno.test('Test vector 11', () => {
  // deno-fmt-ignore
  const publicKey = secp256k1.convertToXOnlyPublicKey(
    new Uint8Array([
      0xdf, 0xf1, 0xd7, 0x7f, 0x2a, 0x67, 0x1c, 0x5f, 0x36, 0x18, 0x37, 0x26,
      0xdb, 0x23, 0x41, 0xbe, 0x58, 0xfe, 0xae, 0x1d, 0xa2, 0xde, 0xce, 0xd8,
      0x43, 0x24, 0x0f, 0x7b, 0x50, 0x2b, 0xa6, 0x59,
    ])
  );
  // deno-fmt-ignore
  const message = new Uint8Array([
    0x24, 0x3f, 0x6a, 0x88, 0x85, 0xa3, 0x08, 0xd3, 0x13, 0x19, 0x8a, 0x2e,
    0x03, 0x70, 0x73, 0x44, 0xa4, 0x09, 0x38, 0x22, 0x29, 0x9f, 0x31, 0xd0,
    0x08, 0x2e, 0xfa, 0x98, 0xec, 0x4e, 0x6c, 0x89,
  ]);
  // deno-fmt-ignore
  const signature = new Uint8Array([
    0x4a, 0x29, 0x8d, 0xac, 0xae, 0x57, 0x39, 0x5a, 0x15, 0xd0, 0x79, 0x5d,
    0xdb, 0xfd, 0x1d, 0xcb, 0x56, 0x4d, 0xa8, 0x2b, 0x0f, 0x26, 0x9b, 0xc7,
    0x0a, 0x74, 0xf8, 0x22, 0x04, 0x29, 0xba, 0x1d, 0x69, 0xe8, 0x9b, 0x4c,
    0x55, 0x64, 0xd0, 0x03, 0x49, 0x10, 0x6b, 0x84, 0x97, 0x78, 0x5d, 0xd7,
    0xd1, 0xd7, 0x13, 0xa8, 0xae, 0x82, 0xb3, 0x2f, 0xa7, 0x9d, 0x5f, 0x7f,
    0xc4, 0x07, 0xd3, 0x9b,
  ]);
  assertEquals(false, secp256k1.schnorrVerify(signature, message, publicKey));
});

Deno.test('Test vector 12', () => {
  // deno-fmt-ignore
  const publicKey = secp256k1.convertToXOnlyPublicKey(
    new Uint8Array([
      0xdf, 0xf1, 0xd7, 0x7f, 0x2a, 0x67, 0x1c, 0x5f, 0x36, 0x18, 0x37, 0x26,
      0xdb, 0x23, 0x41, 0xbe, 0x58, 0xfe, 0xae, 0x1d, 0xa2, 0xde, 0xce, 0xd8,
      0x43, 0x24, 0x0f, 0x7b, 0x50, 0x2b, 0xa6, 0x59,
    ])
  );
  // deno-fmt-ignore
  const message = new Uint8Array([
    0x24, 0x3f, 0x6a, 0x88, 0x85, 0xa3, 0x08, 0xd3, 0x13, 0x19, 0x8a, 0x2e,
    0x03, 0x70, 0x73, 0x44, 0xa4, 0x09, 0x38, 0x22, 0x29, 0x9f, 0x31, 0xd0,
    0x08, 0x2e, 0xfa, 0x98, 0xec, 0x4e, 0x6c, 0x89,
  ]);
  // deno-fmt-ignore
  const signature = new Uint8Array([
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x69, 0xe8, 0x9b, 0x4c,
    0x55, 0x64, 0xd0, 0x03, 0x49, 0x10, 0x6b, 0x84, 0x97, 0x78, 0x5d, 0xd7,
    0xd1, 0xd7, 0x13, 0xa8, 0xae, 0x82, 0xb3, 0x2f, 0xa7, 0x9d, 0x5f, 0x7f,
    0xc4, 0x07, 0xd3, 0x9b,
  ]);
  assertEquals(false, secp256k1.schnorrVerify(signature, message, publicKey));
});

Deno.test('Test vector 13', () => {
  // deno-fmt-ignore
  const publicKey = secp256k1.convertToXOnlyPublicKey(
    new Uint8Array([
      0xdf, 0xf1, 0xd7, 0x7f, 0x2a, 0x67, 0x1c, 0x5f, 0x36, 0x18, 0x37, 0x26,
      0xdb, 0x23, 0x41, 0xbe, 0x58, 0xfe, 0xae, 0x1d, 0xa2, 0xde, 0xce, 0xd8,
      0x43, 0x24, 0x0f, 0x7b, 0x50, 0x2b, 0xa6, 0x59,
    ])
  );
  // deno-fmt-ignore
  const message = new Uint8Array([
    0x24, 0x3f, 0x6a, 0x88, 0x85, 0xa3, 0x08, 0xd3, 0x13, 0x19, 0x8a, 0x2e,
    0x03, 0x70, 0x73, 0x44, 0xa4, 0x09, 0x38, 0x22, 0x29, 0x9f, 0x31, 0xd0,
    0x08, 0x2e, 0xfa, 0x98, 0xec, 0x4e, 0x6c, 0x89,
  ]);
  // deno-fmt-ignore
  const signature = new Uint8Array([
    0x6c, 0xff, 0x5c, 0x3b, 0xa8, 0x6c, 0x69, 0xea, 0x4b, 0x73, 0x76, 0xf3,
    0x1a, 0x9b, 0xcb, 0x4f, 0x74, 0xc1, 0x97, 0x60, 0x89, 0xb2, 0xd9, 0x96,
    0x3d, 0xa2, 0xe5, 0x54, 0x3e, 0x17, 0x77, 0x69, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
    0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c,
    0xd0, 0x36, 0x41, 0x41,
  ]);
  assertEquals(false, secp256k1.schnorrVerify(signature, message, publicKey));
});

Deno.test('Test vector 14', () => {
  // deno-fmt-ignore
  const compressedPublicKey = new Uint8Array([
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x30,
  ]);
  assertThrows(() => {
    secp256k1.convertToXOnlyPublicKey(compressedPublicKey),
      Error,
      'Could not convert the serialized public key to x-only public key';
  });
});
